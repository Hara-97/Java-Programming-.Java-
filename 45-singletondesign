// 45.	Implement a singleton design pattern for a Logger class, ensuring only one instance of the class can be created
class Logger {
    // Static instance of Logger
    private static Logger instance = null;

    // Private constructor to prevent object creation from outside
    private Logger() {
        System.out.println("Logger created");
    }

    // Public method to get the single instance
    public static Logger getInstance() {
        if (instance == null) {
            instance = new Logger();
        }
        return instance;
    }

    // Method to log messages
    public void log(String msg) {
        System.out.println("Log: " + msg);
    }
}

public class Main {
    public static void main(String[] args) {
        // Get Logger instance
        Logger logger1 = Logger.getInstance();
        logger1.log("Hello from logger1");

        // Get Logger instance again
        Logger logger2 = Logger.getInstance();
        logger2.log("Hello from logger2");

        // Check if both are the same
        if (logger1 == logger2) {
            System.out.println("Same instance");
        } else {
            System.out.println("Different instances");
        }
    }
}
